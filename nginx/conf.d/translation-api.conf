# 翻译API Nginx配置

# 上游服务器配置
upstream translation_api {
    server translation-api:9000;
    keepalive 32;
}

# 限流配置
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=translate_limit:10m rate=5r/s;

# 主服务器配置
server {
    listen 80;
    server_name _;
    
    # 基本配置
    client_max_body_size 10M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    
    # 日志配置
    access_log /var/log/nginx/translation-api.access.log combined;
    error_log /var/log/nginx/translation-api.error.log warn;
    
    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml;
    
    # 安全头
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # 健康检查（不限流）
    location /health {
        proxy_pass http://translation_api;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        access_log off;
    }
    
    # API文档（轻度限流）
    location ~ ^/(docs|redoc|openapi.json) {
        limit_req zone=api_limit burst=20 nodelay;
        
        proxy_pass http://translation_api;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 缓存API文档
        proxy_cache_valid 200 1h;
        add_header X-Cache-Status $upstream_cache_status;
    }
    
    # 翻译接口（严格限流）
    location ~ ^/api/(translate|batch) {
        limit_req zone=translate_limit burst=10 nodelay;
        
        proxy_pass http://translation_api;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 超时设置
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # 缓冲设置
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
    }
    
    # 其他API接口（普通限流）
    location /api/ {
        limit_req zone=api_limit burst=15 nodelay;
        
        proxy_pass http://translation_api;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 超时设置
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
    
    # 静态文件
    location /static/ {
        alias /usr/share/nginx/html/static/;
        
        # 缓存设置
        expires 1d;
        add_header Cache-Control "public, immutable";
        
        # 压缩
        gzip_static on;
        
        # 安全设置
        location ~* \.(js|css)$ {
            add_header Content-Type text/plain;
        }
    }
    
    # 根路径
    location / {
        limit_req zone=api_limit burst=20 nodelay;
        
        proxy_pass http://translation_api;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # 错误页面
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        internal;
        return 404 '{"error": "Not Found", "message": "The requested resource was not found"}';
        add_header Content-Type application/json;
    }
    
    location = /50x.html {
        internal;
        return 500 '{"error": "Internal Server Error", "message": "The server encountered an internal error"}';
        add_header Content-Type application/json;
    }
}

# HTTPS配置（如果有SSL证书）
# server {
#     listen 443 ssl http2;
#     server_name your-domain.com;
#     
#     ssl_certificate /path/to/certificate.crt;
#     ssl_certificate_key /path/to/private.key;
#     
#     # SSL配置
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#     
#     # 其他配置与HTTP相同...
# }
